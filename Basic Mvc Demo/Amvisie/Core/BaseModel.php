<?php
declare(strict_types=1);

namespace Amvisie\Core;

/**
 * Defines abstract methods for model classes.
 * @author Ritesh Gite <huestack@yahoo.com>
 */
abstract class BaseModel
{
    private $errorList = array();

    /**
     * A status of validation.
     * @var bool
     */
    private $isValid = null;

    /**
     * An object of ModelMeta class that collects meta information about model properties.
     * @var ModelMeta
     */
    private $meta;

    /**
     * Validates properties of model according to specified set of rules.
     */
    public function validate() : void
    {
        $this->onValidating();
        foreach ($this->getMeta()->attributes() as $property => $attribues) {
            /* @var $attribute BaseRule */
            foreach ($attribues as $attribute) {
                if (!($attribute instanceof BaseRule)) {
                    continue;
                }

                if (!$attribute->validate($this, $property)) {
                    $this->addError($property, $attribute->getMessage());
                    break;
                }
            }
        }

        $this->isValid = count($this->errorList) == 0;

        $this->onValidated();
    }

    /**
     * Gets list of errors generated by validation.
     * @return array A key-value pair associative array.
     */
    public function &getErrors() : array
    {
           return $this->errorList;
    }

    /**
     * Gets a status of validation.
     * @return boolean A validation result.
     */
    public function isValid() : bool
    {
        return $this->isValid;
    }

    /**
     *
     * @return Annotations\ModelMeta
     */
    public function &getMeta() : \Amvisie\Core\Annotations\ModelMeta
    {
        if ($this->meta == null){
            $this->meta = new Annotations\ModelMeta();
        }

        return $this->meta;
    }

    protected function onValidating()
    {
        // Do nothing. Supposed to be a placeholder for virtual call.
    }

    protected function onValidated()
    {
        // Do nothing. Supposed to be a placeholder for virtual call.
    }

    /**
     * Adds an error in collection when validation fails.
     * @param string $key A name of property which failed the validation.
     * @param string $text An error message.
     */
    private function addError($key, $text) : void
    {
        $this->errorList[$key] = $text;
    }
}
