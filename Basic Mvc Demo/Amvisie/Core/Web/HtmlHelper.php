<?php

namespace Amvisie\Core\Web;

use Amvisie\Core\BaseModel;
use Amvisie\Core\BaseRule;

/**
 * Provides methods to generate Html output for form.
 * @author Ritesh Gite <huestack@yahoo.com>
 */
class HtmlHelper
{
    /**
     * A name of tag to use in beginTemplate and endTemplate methods.
     * @var string  
     */
    private $templateTag;
    
    /**
     * Information that is required during rendering a view.
     * @var ViewContext 
     */
    private $viewContext;
    
    /**
     * An object containing request data.
     * @var \Amvisie\Core\HttpRequest
     */
    private $request;
    
    /**
     * An object containing request data.
     * @var \Amvisie\Core\HttpResponse
     */
    private $response;
    
    /**
     * An array having error messages.
     * @var array 
     */
    private $errorList;

    /**
     * A model object.
     * @var mixed
     */
    private $model;
    
    /**
     * @param ViewContext $viewContext A reference to ViewContext object.
     * @param BaseModel $model A reference to model object.
     * @param type $defaults
     */
    public function __construct(ViewContext &$viewContext, $model)
    {
        
        $this->viewContext = $viewContext;
        $this->request = $this->viewContext->request();
        $this->response = $this->viewContext->response();
        
        $this->innerSetModel($model);
    }

    /**
     * Generates a FORM tag.
     * @param string $method A name of method of controller. If $method is null, current method is used.
     * @param string $controller A name of controller. If $controller is null, current controller is used.
     * @param array $attributes An array of HTML attributes for FORM tag.
     * @param array $routeData An array of data to include in URL.
     */
    public function beginForm(string $method = null, string $controller = null, array $attributes = array(), array $routeData = array()) : void
    {
        if ($method == null) {
            $method = $this->viewContext->getRoute()->getMethod();
        }
        
        if ($controller == null) {
            $controller = $this->viewContext->getRoute()->getController(true);
        }
        
        echo '<form action="', $this->viewContext->getRoute()->getRouteUrl($method, $controller, $routeData), '" method="', 
                array_key_exists('method', $attributes) ? $attributes['method'] : 'post', '" ';
        
        unset($attributes['method']);
        foreach ($attributes as $key => $value) {
            if (is_int($key)) {
                echo $value, ' ';
                continue;
            }

            echo $key;
            if ($value !== null) {
                echo '="', $value, '" ';
            }
        }
        
        echo '>';
    }
    
    /**
     * Ends a FORM tag.
     */
    public function endForm() : void
    {
        echo '</form>';
    }
    
    /**
     * Generates a SCRIPT/TEMPLATE tag to use as angular, vuejs etc. template.
     * @param string $id ID of template.
     * @param string $type Type of template. Default is <em>text/x-template</em>.
     * @param bool $useTemplateTag Use HTML5 <template> instead of <script>.
     */
    public function beginTemplate(string $id = null, string $type = "text/x-template", bool $useTemplateTag = false) : void
    {
        $this->templateTag = $useTemplateTag ? "template" : "script";
        echo "<$this->templateTag type='$type' ";
        
        if ($id) {
            echo ' id="' . $id . '"';
        }

        echo ">";
    }
    
    /**
     * Ends a SCRIPT/TEMPLATE tag.
     */
    public function endTemplate() : void
    {
        echo "</$this->templateTag>";
    }

    /**
     * Generates an HTML tag to accomodate validation error message for INPUT, TEXTAREA, or SELECT tags.
     * @param string $for A name of HTML element.
     */
    public function validateMessage(string $for) : void
    {
        /*echo '<span class="field-validation-valid" data-valmsg-for="', $for, '" data-valmsg-replace="true">', 
                (array_key_exists($for, $this->errorList) ? $this->errorList[$for] : ''),'</span>';*/
        if (array_key_exists($for, $this->errorList)) {
            echo '<label for="', $for, '" class="error" generated="true">', $this->errorList[$for],'</label>';
        } else {
            echo '<label for="', $for, '" class="error" generated="true" style="display:none"></label>';
        }
    }

    /**
     * Generates a HTML based list of error messages generated by model validator.
     * @param array $attributes A collection of attributes.
     */
    public function validationSummary(array $attributes = array()) : void
    {
        if (count($this->errorList) == 0) 
            return;
        
        echo '<ul ';
        
        foreach ($attributes as $key => $value){
            echo $key, '="', $value, '" ';
        }
        
        echo '>';
        
        foreach ($this->errorList as $key => $value) {
            echo '<li>', $value, '</li>';
        }
        
        echo '</ul>';
    }
    
    
    /**
    * Generates a label tag based on model's property. The property must exist.
    * @param string $property Name of property.
    * @param array $attributes A collection of attributes.
    */
    public function labelFor(string $property, array $attributes = array()) : void
    {
        if ($this->model == null || !($this->model instanceof \Amvisie\Core\BaseModel)){
            throw new \BadMethodCallException('Model object is not instance of BaseModel.');
        } else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("Property $property does not exist.");
        }
        
        echo '<label for="', $property, '" ';
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        $caption = null;
        $metaAttributes = $this->model->getMeta()->getAttributes($property);
        if ($metaAttributes != null && count($metaAttributes) > 0) {
            foreach ($metaAttributes as $attribute) {
                if ($attribute instanceof \Amvisie\Core\Annotations\ModelDisplay) {
                    $caption = $attribute->getCaption();
                    break;
                }
            }
        }
        
        if ($caption == null) {
            $caption = $property;
        }
        
        echo '>', $caption, '</label>';
    }
    
    /**
     * Generates a hidden field based on model's property. The property must exist.
     * @param string $name Name of property.
     * @param string $value Value of hidden field.
     * @param array $attributes Any attributes to include in HTML tag.
     */
    public function hidden(string $name, string $value = '', array $attributes = array()) : void
    {
        echo '<input type="hidden" name="' , $name , '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', trim($name, '[]'), '" ';
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        //$value = $this->request->param($name);
        
        if ($value != '') {
            echo 'value="', $value, '" ';
        }
        
        echo '/>';
    }

    /**
     * Generates a hidden field based on model's property. The property must exist.
     * @param string $property Name of property.
     * @param array $attributes Any attributes to include in HTML tag.
     * @throws BadMethodCallException The model is either uninitialized or has incorrect reference.
     * @throws InvalidArgumentException The property does not exist in model object.
     */
    public function hiddenFor(string $property, array $attributes = array()) : void
    {
        if ($this->model == null || !($this->model instanceof BaseModel)) {
            throw new \BadMethodCallException('Model object is not instance of BaseModel. Use <b>hidden</b> method instead.');
        } else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("Property $property does not exist.");
        }
        
        echo '<input type="hidden" name="' , $property , '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $property, '" ';
        }
        
        if (isset($this->errorList[$property])) {
            if (array_key_exists('class', $attributes)){
                $attributes['class'] = $attributes['class'] . ' error';
            } else {
                echo 'class="error" ';
            }
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        echo 'value="', $this->model->{$property}, '" ';
        
        if ($this->clientValidationEnabled()) {
            $metaAttributes = $this->model->getMeta()->getAttributes($property);
            if ($metaAttributes != null) {
                /* @var $attribute BaseRule */
                foreach ($metaAttributes as $attribute) {
                    if (!($attribute instanceof BaseRule)) continue;
                    
                    foreach ($attribute->getHtmlAttributes() as $key => $value) {
                        echo $key, '="', $value, '" ';
                    }
                }
            }
        }
        
        echo '/>';
    }
    
    /**
     * Generates a textbox.
     * @param string $name Value of <b>name</b> attribute.
     * @param string $attributes An array of attributes for HTML tag.
     */
    public function textbox(string $name, array $attributes = array()) : void
    {
        echo '<input type="text" name="' , $name , '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', trim($name, '[]'), '" ';
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        $value = $this->request->param($name);
        
        if ($value != null) {
            echo 'value="', $value, '" ';
        }
        
        echo '/>';
    }
    
    /**
     * Generates a textbox based on model's property. The property must exist.
     * @param string $property Name of property.
     * @param array $attributes Any attributes to include in HTML tag.
     * @throws BadMethodCallException The model is either uninitialized or has incorrect reference.
     * @throws InvalidArgumentException The property does not exist in model object.
     */
    public function textboxFor(string $property, array $attributes = array()) : void
    {
        if ($this->model == null || !($this->model instanceof BaseModel)) {
            throw new \BadMethodCallException('Model object is not instance of BaseModel. Use <b>textbox</b> method instead.');
        } else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("Property $property does not exist.");
        }
        
        echo '<input name="' , $property , '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $property, '" ';
        }
        
        if (!array_key_exists('type', $attributes)) {
            echo 'type="text" ';
        }
        
        if (isset($this->errorList[$property])) {
            if (array_key_exists('class', $attributes)){
                $attributes['class'] = $attributes['class'] . ' error';
            } else {
                echo 'class="error" ';
            }
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        echo 'value="', $this->model->{$property}, '" ';
        
        if ($this->clientValidationEnabled()) {
            $metaAttributes = $this->model->getMeta()->getAttributes($property);
            if ($metaAttributes != null) {
                /* @var $attribute BaseRule */
                foreach ($metaAttributes as $attribute) {
                    if (!($attribute instanceof BaseRule)) 
                        continue;
                    
                    foreach ($attribute->getHtmlAttributes() as $key => $value) {
                        echo $key, '="', $value, '" ';
                    }
                }
            }
        }
        
        echo '/>';
    }
    
    /**
     * Generates a date input based on model's property. The property must exist.
     * @param string $property Name of property.
     * @param array $attributes Any attributes to include in HTML tag.
     * @throws BadMethodCallException The model is either uninitialized or has incorrect reference.
     * @throws InvalidArgumentException The property does not exist in model object.
     */
    public function dateFor(string $property, array $attributes = array()) : void
    {
        if ($this->model == null || !($this->model instanceof BaseModel)) {
            throw new \BadMethodCallException('Model object is not instance of BaseModel.');
        } else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("Property $property does not exist.");
        }
        
        echo '<input type="date" name="' , $property , '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $property, '" ';
        }
        
        if (isset($this->errorList[$property])) {
            if (array_key_exists('class', $attributes)) {
                $attributes['class'] = $attributes['class'] . ' error';
            } else {
                echo 'class="error" ';
            }
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        echo 'value="', $this->model->{$property}, '" ';
        
        if ($this->clientValidationEnabled()) {
            $metaAttributes = $this->model->getMeta()->getAttributes($property);
            if ($metaAttributes != null) {
                /* @var $attribute BaseRule */
                foreach ($metaAttributes as $attribute) {
                    if (!($attribute instanceof BaseRule)) 
                        continue;

                    foreach ($attribute->getHtmlAttributes() as $key => $value) {
                        echo $key, '="', $value, '" ';
                    }
                }
            }
        }
        
        echo '/>';
    }

    /**
     * Generates a email input based on model's property. The property must exist.
     * @param string $property Name of property.
     * @param array $attributes Any attributes to include in HTML tag.
     * @throws BadMethodCallException The model is either uninitialized or has incorrect reference.
     * @throws InvalidArgumentException The property does not exist in model object.
     */
     public function emailFor(string $property, array $attributes = array()) : void
     {
        if ($this->model == null || !($this->model instanceof BaseModel)) {
            throw new \BadMethodCallException('Model object is not instance of BaseModel.');
        } else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("Property $property does not exist.");
        }
        
        echo '<input type="email" name="' , $property , '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $property, '" ';
        }
        
        if (isset($this->errorList[$property])) {
            if (array_key_exists('class', $attributes)) {
                $attributes['class'] = $attributes['class'] . ' error';
            } else {
                echo 'class="error" ';
            }
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        echo 'value="', $this->model->{$property}, '" ';
        
        if ($this->clientValidationEnabled()) {
            $metaAttributes = $this->model->getMeta()->getAttributes($property);
            if ($metaAttributes != null) {
                /* @var $attribute BaseRule */
                foreach ($metaAttributes as $attribute) {
                    if (!($attribute instanceof BaseRule)) 
                        continue;

                    foreach ($attribute->getHtmlAttributes() as $key => $value) {
                        echo $key, '="', $value, '" ';
                    }
                }
            }
        }
        
        echo '/>';
    }
    
    /**
     * Generates a password box.
     * @param type $name
     * @param type $attributes
     */
    public function password(string $name, array $attributes = array()) : void
    {
        echo '<input type="password" name="', $name, '" ';

        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $name, '" ';
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        echo '/>';
    }
    
    /**
     * Generates a password box based on model's property. The property must exist.
     * @param string $property Name of property.
     * @param array $attributes Any attributes to include in HTML tag.
     * @throws BadMethodCallException The model is either uninitialized or has incorrect reference.
     * @throws InvalidArgumentException The property does not exist in model object.
     */
    public function passwordFor(string $property, array $attributes = array()) : void
    {
        if ($this->model == null || !($this->model instanceof BaseModel)) {
            throw new \BadMethodCallException('Model object is not instance of BaseModel. Use <b>password</b> method instead.');
        } else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("$property does not exist.");
        }
        
        echo '<input type="password" name="' , $property , '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $property, '" ';
        }
        
        if (isset($this->errorList[$property])) {
            if (array_key_exists('class', $attributes)) {
                $attributes['class'] = $attributes['class'] . ' error';
            } else {
                echo 'class="error" ';
            }
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
       
        if ($this->clientValidationEnabled()) {
            $metaAttributes = $this->model->getMeta()->getAttributes($property);
            if ($metaAttributes != null) {
                /* @var $attribute BaseRule */
                foreach ($metaAttributes as $attribute) {
                    if (!($attribute instanceof BaseRule)) 
                        continue;
                    
                    foreach ($attribute->getHtmlAttributes() as $key => $value) {
                        echo $key, '="', $value, '" ';
                    }
                }
            }
        }
        
        echo '/>';
    }
    
    /**
     * Generates a multiline textbox.
     * @param string $name A value for name attribute.
     * @param array $attributes An array containing HTML attributes and values.
     */
    public function textarea(string $name, array $attributes = array()) : void
    {
        echo '<textarea name="', $name . '" ';
        $id = null;
        
        if (!array_key_exists('id', $attributes))
        {
            echo 'id="', $name, '" ';
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        echo '>', $this->request->param($name), '</textarea>';
    }
    
    /**
     * Generates a multiline textbox based on model's property. The property must exist.
     * @param string $property A name of model's property.
     * @param array $attributes An array of attributes and values.
     * @throws \BadMethodCallException
     * @throws \InvalidArgumentException
     */
    public function textareaFor(string $property, array $attributes = array()) : void
    {
        if ($this->model == null || !($this->model instanceof BaseModel)) {
            throw new \BadMethodCallException('Model object is not instance of BaseModel. Use <b>textarea</b> method instead.');
        } else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("$property does not exist.");
        }
        
        echo '<textarea name="', $property . '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $property, '" ';
        }
        
        if (isset($this->errorList[$property])) {
            if (array_key_exists('class', $attributes)) {
                $attributes['class'] = $attributes['class'] . ' error';
            } else {
                echo 'class="error" ';
            }
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        if ($this->clientValidationEnabled()) {
            $metaAttributes = $this->model->getMeta()->getAttributes($property);
            if ($metaAttributes != null) {
                /* @var $attribute BaseRule */
                foreach ($metaAttributes as $attribute) {
                    if (!($attribute instanceof BaseRule)) 
                        continue;
                    
                    foreach ($attribute->getHtmlAttributes() as $key => $value) {
                        echo $key, '="', $value, '" ';
                    }
                }
            }
        }
        
        echo '>', $this->model->{$property}, '</textarea>';
    }
    
    /**
     * Generates a select tag.
     * @param string $name A name of select tag.
     * @param \Amvisie\Core\Web\SelectOptionList $options A list of options to fill select.
     * @param array $attributes Array of attributes.
     */
    public function dropdown($name, SelectOptionList $options = null, array $attributes = array(), string $defaultCaption = null, string $defaultValue = '') : void
    {
        echo '<select name="', $name . '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', trim($name, '[]'), '" ';
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        echo '>';
        if ($defaultCaption != null) {
            echo "<option value='$defaultValue'>$defaultCaption</option>";
        }
        
        if ($options != null) {
            if ($options->hasObjects()){
                foreach ($options->getDataArray() as $option) {
                    
                    echo '<option ';
                    
                    foreach ($options->getDataAttributeFields() as $property) {
                        echo 'data-', $property, '="', $option->{$property}, '" ';
                    }

                    $value = $option->{$options->getValueProperty()};
                    if ($value == $this->model->{$property}) {
                        echo 'selected="selected" ';
                    }
                    
                    echo 'value="', $value, '">';
                    echo $option->{$options->getCaptionProperty()};
                    echo '</option>';
                }
            } else {
                foreach ($options->getDataArray() as $option) {
                    echo '<option ';
                    foreach ($options->getDataAttributeFields() as $property) {
                        echo 'data-', $property, '="', $option[$property], '" ';
                    }

                    $value = $option[$options->getValueProperty()];
                    if ($value == $this->model->{$property}) {
                        echo 'selected="selected" ';
                    }

                    echo 'value="', $value, '">';
                    echo $option[$options->getCaptionProperty()];
                    echo '</option>';
                }
            }
        }
        
        echo '</select>';
    }
    
    /**
     * Generates a select tag based on model's property.
     * @param type $property
     * @param SelectOptionList $options
     * @param string $attributes
     * @throws \BadMethodCallException
     * @throws \InvalidArgumentException
     */
    public function dropdownFor(string $property, SelectOptionList $options, $attributes = array(), $defaultCaption = null, $defaultValue = '') : void
    {
        if ($this->model == null || !($this->model instanceof BaseModel)) {
            throw new \BadMethodCallException('Model object is not instance of BaseModel.');
        }else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("$property does not exist.");
        }
        
        echo '<select name="', $property . '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $property, '" ';
        }
        
        if (isset($this->errorList[$property])) {
            if (array_key_exists('class', $attributes)){
                $attributes['class'] = $attributes['class'] . ' error';
            } else {
                echo 'class="error" ';
            }
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        if ($this->clientValidationEnabled()) {
            $metaAttributes = $this->model->getMeta()->getAttributes($property);
            if ($metaAttributes != null) {
                /* @var $attribute BaseRule */
                foreach ($metaAttributes as $attribute) {
                    if (!($attribute instanceof BaseRule)) continue;
                    
                    foreach ($attribute->getHtmlAttributes() as $key => $value) {
                        echo $key, '="', $value, '" ';
                    }
                }
            }
        }
        
        echo '>';
        if ($defaultCaption != null) {
            echo "<option value='$defaultValue'>$defaultCaption</option>";
        }
        
        $dataArray = $options->getDataArray();
        if ($dataArray != null) {
            if ($options->hasObjects()) {
                foreach ($options->getDataArray() as $option) {
                    echo '<option ';
                    foreach ($options->getDataAttributeFields() as $property) {
                        echo 'data-', $property, '="', $option->{$property}, '" ';
                    }

                    $value = $option->{$options->getValueProperty()};
                    
                    if ($value == $this->model->{$property}) {
                        echo 'selected="selected" ';
                    }
                    
                    echo 'value="', $value, '">';
                    echo $option->{$options->getCaptionProperty()};
                    echo '</option>';
                }
            } else {
                foreach ($options->getDataArray() as $option) {
                    echo '<option ';
                    foreach ($options->getDataAttributeFields() as $property) {
                        echo 'data-', $property, '="', $option[$property], '" ';
                    }

                    $value = $option[$options->getValueProperty()];
                    if ($value == $this->model->{$property}) {
                        echo 'selected="selected" ';
                    }

                    echo 'value="', $value, '">';
                    echo $option[$options->getCaptionProperty()];
                    echo '</option>';
                }
            }
        }
        
        echo '</select>';
    }
    /**
     * Generates a checkbox.
     * @param string $name Name attribute of checkbox..
     * @param array $attributes Any attributes to include in HTML tag.
     */
    public function checkBox(string $name, string $value, $attributes = array())
    {
        echo '<input type="checkbox" name="', $name, '" value="' . $value .'"';
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        echo ' />';
    }
    
    /**
     * Generates a checkbox based on model's property. The property must exist.
     * @param string $property Name of property.
     * @param array $attributes Any attributes to include in HTML tag.
     * @throws BadMethodCallException The model is either uninitialized or has incorrect reference.
     * @throws InvalidArgumentException The property does not exist in model object.
     */
    public function checkboxFor(string $property, array $attributes = array()) : void
    {
        if ($this->model == null || !($this->model instanceof BaseModel)) {
            throw new \BadMethodCallException('Model object is not instance of BaseModel. Use <b>checkbox</b> method instead.');
        } else if (!property_exists($this->model, $property)) {
            throw new \InvalidArgumentException("$property does not exist.");
        }
        
        echo '<input type="checkbox" name="' , $property , '" ';
        
        if (!array_key_exists('id', $attributes)) {
            echo 'id="', $property, '" ';
        }
        
        if ($this->model->{$property} != null && (bool)$this->model->{$property} === true) {
            echo 'checked ';
        }
        
        if (isset($this->errorList[$property])) {
            if (array_key_exists('class', $attributes)) {
                $attributes['class'] = $attributes['class'] . ' error';
            } else {
                echo 'class="error" ';
            }
        }
        
        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
       
        if ($this->clientValidationEnabled()) {
            $metaAttributes = $this->model->getMeta()->getAttributes($property);
            if ($metaAttributes != null) {
                /* @var $attribute BaseRule */
                foreach ($metaAttributes as $attribute) {
                    if (!($attribute instanceof BaseRule)) 
                        continue;
                    
                    foreach ($attribute->getHtmlAttributes() as $key => $value) {
                        echo $key, '="', $value, '" ';
                    }
                }
            }
        }
        
        echo '/>';
    }
    
    /**
    * Creates a hyperlink by forming a url from method and controller name.
    * @param string $text A text to display as hyperlink.
    * @param string $method A name of method in controller. If not provided, current method is used.
    * @param string $controller A name of  controller. If not provided, current controller is used.
    * @param array $attributes An array of attributes to add in hyperlink.
    * @param array $routeData An array of route data.
    */
    public function link(string $text, string $method = null, string $controller = null, array $attributes = array(), array $routeData = array()) : void
    {
        if ($method == null){
            $method = $this->viewContext->getRoute()->getMethod();
        }
        
        if ($controller == null){
            $controller = $this->viewContext->getRoute()->getController(true);
        }
        
        echo '<a href="', $this->viewContext->getRoute()->getRouteUrl($method, $controller, $routeData), '" ';

        if ($attributes != null) {
            foreach ($attributes as $key => $value) {
                if (is_int($key)) {
                    echo $value, ' ';
                    continue;
                }
                
                echo $key;
                if ($value !== null) {
                    echo '="', $value, '" ';
                }
            }
        }
        
        echo '>' . htmlspecialchars($text) . '</a>';
    }
    
    /**
    * Creates a hyperlink with provider url.
    * @param string $text A text to display as hyperlink.
    * @param string $href A url to assign in href.
    * @param array $attributes An array of attributes to add in hyperlink.
    */
    public function linkUrl(string $text, string $href, array $attributes = array()) : void
    {
        echo '<a href="', $href, '" ';

        foreach ($attributes as $key => $value) {
            echo $key, '="', $value, '" ';
        }
        
        echo '>' . htmlspecialchars($text) . '</a>';
    }
    
    /**
     * Renders a partial view.
     * @param string $viewName A name of view.
     * @param mixed $model A reference to model object.
     */
    public function renderPartial(string $viewName, &$model = null) : void
    {
        $view = new View($viewName, $this->viewContext, $model, false);
        $view->render();
    }
    
    /**
     * Infrastructure method. Sets a model object to verify the properties.
     * @param mixed $model
     * @throws \InvalidArgumentException
     */
    public function setModel($model) : void
    {
        if ($model == null){
            throw new \InvalidArgumentException($model . '$model cannot be null');
        }
        
        $this->innerSetModel($model);
    }
    
    private function innerSetModel($model) : void
    {
        $this->model = $model;
        if ($model instanceof BaseModel)
        {
            $this->errorList = $model->getErrors();
            //$this->metaAtttributes = $model->getMeta()->attributes();
        }
    }

    /**
    * Gets if client side validation is enabled or disabled. If enabled, HtmlHelper generates data attributes for javascript validation library.
    * @return bool A boolean value indicating whether client side validation is enabled.
    */
    public function clientValidationEnabled() : bool
    {
        return defined('CLIENT_VALIDATION') && CLIENT_VALIDATION;
    }
}
